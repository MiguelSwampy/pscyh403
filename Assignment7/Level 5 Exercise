#Wait Exercises
for trial in range(nTrials):
   
    my_image.image = os.path.join(image_dir, stims[trial])
    
    my_image.draw
    fix_text.draw
    win.flip()
    core.wait(.5)
    
    my_text.text = endtr_msg + ' ' + str(trial)
    my_text.draw()
    win.flip()
    core.wait(.5)

#Clock Exercises
#1. 
for trial in range(nTrials): #loop through trials
    
    my_image.image = os.path.join(image_dir, stims[trial])
    
    fix_text.draw()
    win.flip()
    core.wait(.5)
    
    my_image.draw()
    win.flip()
    imgStartTime = wait_timer.getTime()
    core.wait(2)
    imgEndTime = wait_timer.getTime()
    
    fix_text.draw()
    win.flip()
    core.wait(.5)

    print('Image duration was {} seconds'.format(imgEndTime - imgStartTime))
win.close() 
# it's relatively precise

#2
for trial in range(nTrials): #loop through trials
    
    my_image.image = os.path.join(image_dir, stims[trial])
    
    fix_text.draw()
    win.flip()
    core.wait(.5)
    
    stimTimer.reset()
    imgStartTime = wait_timer.getTime()
    while stimTimer.getTime()<= 1:
        my_image.draw()
        win.flip()
    imgEndTime = wait_timer.getTime()
    
    fix_text.draw()
    win.flip()
    core.wait(.5)

    print('Image duration was {} seconds'.format(imgEndTime - imgStartTime))
win.close() #close the window after trials have looped 
#accurate, better than core.wait

#3
for trial in range(nTrials): #loop through trials
    
    my_image.image = os.path.join(image_dir, stims[trial])
    
    fix_text.draw()
    win.flip()
    core.wait(.5)
    
    stimTimer.reset()
    stimTimer.add(1)
    imgStartTime = waitTimer.getTime()
    while stimTimer.getTime() > 0:
        my_image.draw()
        win.flip()
    imgEndTime = waitTimer.getTime()
    
    fix_text.draw()
    win.flip()
    core.wait(.5)

    print('Image duration was {} seconds'.format(imgEndTime - imgStartTime))
win.close() #close the window after trials have looped 

#4
blockTimer = core.Clock()
trialTimer = core.Clock()
stimTimer = core.Clock()
respTimer = core.Clock()

for block in range(nBlocks):
    blockTimer.reset()
    blockStart = blockTimer.getTime()

    for trial in range(nTrials)
        trialTimer.reset()
        trialStart = trialTimer = trialTimer.getTime()
        
        stimTimer.reset()
        while stimTimer <= 1:
            
        stimTimer.reset()
        respTimer.reset()
        while stimTimer <= 0.5:
            
        stimTimer.reset()
        while stimTimer <= 1
            
        event.waitKeys()
        RTrespTimer.getTime()
        
        trialEnd = trialTiemr.getTime()
    
    blockEnd = blockTimer.getTime()

#frame-based timing exercises 
#1
from psychopy import visual, monitors, event, core

#define the monitor parameters
mon = monitors.Monitor('myMonitor', width=35.56, distance=60)
mon.setSizePix([1600,900])
win = visual.Window(monitor=mon) #define a window

import os
#stuff you only have to define once at the top of your script
os.chdir('C:/Users/M/Desktop/Assignment 7')
main_dir = os.getcwd() 
image_dir = os.path.join(main_dir,'images')

fix_text = visual.TextStim(win, text = '+')
my_image = visual.ImageStim(win)

stims = ['face01.jpg','face02.jpg','face03.jpg']
nTrials = len(stims) #create a number of trials for your images


fixTime = .5
stimTime = 1.0

refresh = 1.0/60.0

fixFrames = int(fixTime/refresh)
stimFrames = 1
totalFrames = fixFrames + stimFrames + fixFrames
waitTimer = core.Clock() #meta timer for my stimuli

for trial in range(nTrials): #loop through trials
    
    my_image.image = os.path.join(image_dir, stims[trial])
    
    for nFrames in range(totalFrames):
        
        if 0 <= nFrames <= fixFrames:
            fix_text.draw()
            win.flip()

        if fixFrames < nFrames <= fixFrames + stimFrames:
            if nFrames == fixFrames + 1:
                imgStartTime = waitTimer.getTime()
            my_image.draw()
            win.flip()
    
        if fixFrames + stimFrames < nFrames < totalFrames:
            if nFrames == fixFrames + stimFrames +  1:
                imgEndTime = waitTimer.getTime()
            fix_text.draw()
            win.flip()

    print('Image duration was {} seconds'.format(imgEndTime - imgStartTime))
win.close() #close the window after trials have looped 

#2
from psychopy import visual, monitors, event, core, logging 

#define the monitor parameters
mon = monitors.Monitor('myMonitor', width=35.56, distance=60)
mon.setSizePix([1600,900])
win = visual.Window(monitor=mon) #define a window

import os
#stuff you only have to define once at the top of your script
os.chdir('C:/Users/M/Desktop/Assignment 7')
main_dir = os.getcwd() 
image_dir = os.path.join(main_dir,'images')

fix_text = visual.TextStim(win, text = '+')
my_image = visual.ImageStim(win)

stims = ['face01.jpg','face02.jpg','face03.jpg','face01.jpg','face02.jpg','face03.jpg','face01.jpg','face02.jpg','face03.jpg','face01.jpg','face02.jpg','face03.jpg','face01.jpg','face02.jpg','face03.jpg'] #create a list if images to show
nTrials = len(stims) #create a number of trials for your images

refresh = 1.0/60.0

fixFrames = 2
stimFrames = 1
totalFrames = stimFrames + fixFrames
waitTimer = core.Clock() #meta timer for my stimuli

win.recordFramIntervals = True

logging.console.setLevel(logging.WARNING)

for trial in range(nTrials): #loop through trials
    
    my_image.image = os.path.join(image_dir, stims[trial])
    
    for nFrames in range(totalFrames):

        if 0 <= nFrames <= stimFrames:
            my_image.draw()
            win.flip()
    
        if stimFrames < nFrames < totalFrames:
            fix_text.draw()
            win.flip()
    print('Overall, %i frames were dropped.' %win.nDroppedFrames)
win.close() #close the window after trials have looped 
 
